import hashlib
import base64
# from pyspx.xmss import XMSS_SHA2_10_256 as XMSS
import hashlib
import base64
import base58
from hashlib import sha256
from datetime import datetime

from crypto.xmss2 import XMSS, XMSS_verify, XMSSPublicKey, SigXMSS
class ValidatorVRF_XMSS:
    def __init__(self, keypair=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞. –ï—Å–ª–∏ –∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ.
        """
        if keypair:
            self.xmss = keypair  # –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä XMSS
        else:
            self.xmss = XMSS.create(height=5)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É –∫–ª—é—á–µ–π

    def get_public_key(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ base64."""
        return self.xmss.keyPair.PK.to_hex()

    def get_private_key(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ base64 (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–¥–æ–π)."""
        return self.xmss.private_key.hex()

    def generate_vrf(self, prev_block_hash: str):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç VRF-–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç —Ö–µ—à –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–ª–æ–∫–∞).
        """
        input_data = prev_block_hash.encode()
        signature = self.xmss.sign(input_data)
        vrf_output = sha256(signature.to_bytes()).digest()

        return {
            "vrf_output": base64.b64encode(vrf_output).decode(),
            "vrf_proof": signature.to_base64(),
            "public_key": self.get_public_key()
        }

    @staticmethod
    def verify_vrf(public_key: str, prev_block_hash: str, vrf_output: str, vrf_proof: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç VRF-–∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞.
        """
        try:
            pk_xmss = XMSSPublicKey.from_hex(public_key)
            input_data = prev_block_hash.encode()
            proof_bytes = SigXMSS.from_base64(vrf_proof)
            output_bytes = base64.b64decode(vrf_output)

            # –ü–µ—Ä–µ–¥–∞—ë–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã n –∏ w –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
            verification_result = XMSS_verify(proof_bytes, input_data, pk_xmss, pk_xmss.n, pk_xmss.w)

            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º VRF-–∑–Ω–∞—á–µ–Ω–∏–µ–º
            expected_vrf_output = sha256(proof_bytes.to_bytes()).digest()
            return verification_result and (expected_vrf_output == output_bytes)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ VRF: {e}")
            return False



# --- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã VRF –Ω–∞ –±–∞–∑–µ XMSS ---

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ –Ω–æ–¥—ã
node = ValidatorVRF_XMSS()
print(f"üîë –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–æ–¥—ã: {node.get_public_key()}")

# –ò—Å—Ö–æ–¥–Ω—ã–π —Ö–µ—à –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–ª–æ–∫–∞
prev_block_hash = "abc123def4567890"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VRF
vrf_data = node.generate_vrf(prev_block_hash)
print(f"üé≤ VRF Output: {vrf_data['vrf_output']}")
print(f"‚úÖ VRF Proof: {vrf_data['vrf_proof']}")

# –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è VRF
is_valid = ValidatorVRF_XMSS.verify_vrf(vrf_data["public_key"], prev_block_hash, vrf_data["vrf_output"], vrf_data["vrf_proof"])
print(f"üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è VRF: {is_valid}")
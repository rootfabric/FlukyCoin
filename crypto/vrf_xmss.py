import base64
import hashlib
import random
from hashlib import sha256
from crypto.xmss2 import XMSS, XMSS_verify, XMSSPublicKey, SigXMSS, XMSS_keyGen_from_private_key

THRESHOLD_99P = int((2 ** 256) * 0.99)

class ValidatorVRF_XMSS:
    def __init__(self, keypair, extended_key_hex: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –ø–∞—Ä–æ–π –∫–ª—é—á–µ–π XMSS.
        –ü–∞—Ä–∞–º–µ—Ç—Ä extended_key_hex ‚Äì —ç—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã–π extended key (36 –±–∞–π—Ç –≤ hex-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏),
        –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä—ã –∫–ª—é—á–µ–π.
        """
        self.xmss = XMSS.create(height=keypair.height, key=extended_key_hex)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π extended key

    def get_public_key(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ hex-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏."""
        return self.xmss.keyPair.PK.to_hex()

    def get_private_key(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ hex-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏."""
        return self.xmss.private_key.hex()

    def generate_vrf(self, prev_block_hash: str):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç VRF-–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç —Ö–µ—à –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–ª–æ–∫–∞).
        """
        input_data = prev_block_hash.encode()
        signature = self.xmss.sign(input_data)
        vrf_output = sha256(signature.to_bytes()).digest()
        return {
            "vrf_output": base64.b64encode(vrf_output).decode(),
            "vrf_proof": signature.to_base64(),
            "public_key": self.get_public_key()
        }

    @staticmethod
    def verify_vrf(public_key: str, prev_block_hash: str, vrf_output: str, vrf_proof: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç VRF-–∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞.
        """
        try:
            pk_xmss = XMSSPublicKey.from_hex(public_key)
            input_data = prev_block_hash.encode()
            proof_bytes = SigXMSS.from_base64(vrf_proof)
            output_bytes = base64.b64decode(vrf_output)

            # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            verification_result = XMSS_verify(proof_bytes, input_data, pk_xmss, pk_xmss.n, pk_xmss.w)
            expected_vrf_output = sha256(proof_bytes.to_bytes()).digest()
            return verification_result and (expected_vrf_output == output_bytes)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ VRF: {e}")
            return False

def select_validators(validators, prev_block_hash):
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ VRF.
    - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç VRF-–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞.
    - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç VRF-–∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ.
    - –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ —É–±—ã–≤–∞–Ω–∏—é VRF-–∑–Ω–∞—á–µ–Ω–∏–π.
    """
    selected = []
    for validator in validators:
        vrf_data = validator["instance"].generate_vrf(prev_block_hash)
        vrf_output_bytes = base64.b64decode(vrf_data["vrf_output"])
        vrf_value = int.from_bytes(vrf_output_bytes, byteorder="big")
        selected.append({
            "address": validator["address"],
            "instance": validator["instance"],
            "vrf_data": vrf_data,
            "vrf_value": vrf_value
        })

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é VRF-–∑–Ω–∞—á–µ–Ω–∏—è
    sorted_validators = sorted(selected, key=lambda x: x["vrf_value"], reverse=True)
    return sorted_validators


def select_leader_90p(validators, prev_block_hash):
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞, —á—å–µ VRF-–∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 90% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞ (2^256).
    """
    selected = []
    for validator in validators:
        vrf_data = validator["instance"].generate_vrf(prev_block_hash)
        vrf_output_bytes = base64.b64decode(vrf_data["vrf_output"])
        vrf_value = int.from_bytes(vrf_output_bytes, byteorder="big")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–µ–Ω—å—à–µ –ª–∏ vrf_value –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
        if vrf_value > THRESHOLD_99P:
            selected.append({
                "address": validator["address"],
                "instance": validator["instance"],
                "vrf_data": vrf_data,
                "vrf_value": vrf_value
            })

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é VRF-–∑–Ω–∞—á–µ–Ω–∏—è
    sorted_validators = sorted(selected, key=lambda x: x["vrf_value"], reverse=True)
    return sorted_validators

def verify_selection(sorted_validators, prev_block_hash):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å VRF –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ.
    """
    for validator in sorted_validators:
        vrf = validator["vrf_data"]
        valid = ValidatorVRF_XMSS.verify_vrf(vrf["public_key"], prev_block_hash, vrf["vrf_output"], vrf["vrf_proof"])
        if not valid:
            print(f"‚ùå VRF –ø—Ä–æ–≤–µ—Ä–∫–∞ –ù–ï –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {validator['address']}")
        else:
            print(f"‚úÖ VRF –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {validator['address']}")

if __name__ == '__main__':
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XMSS
    # –î–ª—è validator1
    xmss1 = XMSS.create(key="45be862faf6e0dd0ec3d4b9da8f8e12b3e4e130f8ba5c7ce67d8b1894b80c1a7e4d9c29d")

    validator1 = ValidatorVRF_XMSS(
        keypair=xmss1.keyPair,
        extended_key_hex=xmss1.private_key_hex()
    )
    address1 = xmss1.address

    # –î–ª—è validator2
    xmss2 = XMSS.create(key="45f82094df93616c349d2cbb587bea590e8396a44e457f99ce11324bc11d5e190c9bb9e9")

    validator2 = ValidatorVRF_XMSS(
        keypair=xmss2.keyPair,
        extended_key_hex=xmss2.private_key_hex()
    )
    address2 = xmss2.address



    # –î–ª—è validator3
    xmss3 = XMSS.create(key="43bc879a2219e29793f8487782c1ef408dd9d72aee50570a2ac11260cb5588b66e3b7ce4")

    validator3 = ValidatorVRF_XMSS(
        keypair=xmss3.keyPair,
        extended_key_hex=xmss3.private_key_hex()
    )
    address3 = xmss3.address


    # –°–æ–±–∏—Ä–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –≤ —Å–ø–∏—Å–æ–∫
    validators_list = [
        {"address": address1, "instance": validator1},
        {"address": address2, "instance": validator2},
        {"address": address3, "instance": validator3}
    ]

    prev_block_hash = "abc123def4567890"+str(random.random())

    # –í—ã–±–æ—Ä –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ VRF
    sorted_validators = select_validators(validators_list, prev_block_hash)

    # sorted_validators = select_leader_90p(validators_list, prev_block_hash)
    print(sorted_validators)

    print("\nüîπ –ü–æ—Ä—è–¥–æ–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ (–ø–µ—Ä–≤—ã–π ‚Äî –ª–∏–¥–µ—Ä):")
    for i, validator in enumerate(sorted_validators, start=1):
        print(f"{i}. {validator['address']} - VRF value: {validator['vrf_value']}")

    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ VRF –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞:")
    verify_selection(sorted_validators, prev_block_hash)
